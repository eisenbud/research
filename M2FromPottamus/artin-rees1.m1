incr-set prlevel 1
if #0>=2 START
incr-set prlevel -1
;;; Usage:
;;; 	<artin_rees1 s m [d]
;;;
;;; Let R be a ring k[x1,..,xn]/J, with variables in degree 1.
;;; Given a presentation M = coker m:F->G and generators s:H -> G of
;;; a submodule S \subset M, the script computes d, the 
;;; Artin-Rees constant (the smallest integer such that
;;;       S\intersect (x)^e M = (x)^{e-d}(S\intersect (x)^d M)
;;; for all integers e>d).  If the third argument is present, it is
;;; set equal to d; otherwise d is shouted.
;;;
incr-set prlevel 1
jump END
;;; Parameters: s, m matrices with the same target
;;;
;;; Output values: d, an integer
;;;
;;; The script tensors everything with k[y_1,..,y_n,t]/J(y) = R[x,t, t^{-1}(x)], 
;;; where x_i = ty_i. The kernel of the induced map S to
;;; M/t-torsion is then computed. Intermediate computations:
;;;    im (m1: F1 -> G) = (im F -> G) : t^*
;;;    im (s1: H1 -> G) = (im F+H -> G) : t^*
;;;    im (s2: H2 -> G) = representatives of (im H1 -> G) mod (im F1 -> G)
;;;
;;; The Artin-Rees number is then the maximum y-degree of a column of s2.
;;;
;;; Caveats:  if R is a qring, the computation of the extended Rees algebra 
;;; requires computing the std basis of something like the defining
;;; ideal of R TWICE; in the version "artin_rees1" they are
;;; suppressed.

;;;
; created January 26, 1996 DE
START:
;incr-set prlevel -1

;If the orginal ring was R, with max ideal (x),
;work over @T = R[t,t^{-1}(x)], the 
;(extended) Rees algebra.  Do this by
;making the ring @T = k[y,t] and the map from
;the original ring sending x_i to t*y_i.
;The y_i must satsify whatever (homogeneous)
;equations the
;original x_i satisfied.

nvars #1 @nvars
char #1 @char
ring @T
@char
@nvars+1
y[1]-y[@nvars]t
;
;

submat @T @Y
;
1..@nvars
smult @Y t @Yt

;If the base ring was a quotient ring, make
;@T a corresponding quotient, 
;and bring over @Y, @Yt:
present-ring #1 @defideal
ncols @defideal @test

if @test=0 not_a_quotient
; move defideal to the new ring, and recompute a standard basis.
ev @Y @defideal @defideal
std @defideal @defideal

;The script would still work without
;the following two steps, since the
;"extended Rees module" would still
;be right.  Are these steps worth it??
;in the version "artin_rees1" they are
;suppressed.
;sat @defideal @defideal t
;std @defideal @defideal
qring @defideal @T
fetch @Y @Y
fetch @Yt @Yt
not_a_quotient:

;bring over m: F -> G and s: H -> G
ev @Yt #1 @s
ev @Yt #2 @m

;We must double the degrees of source
;and target -- at least target, then we
;can do "setdegs" -- else the mats aren't
;homogeneous.

int @c 0
<ideal @Xm
<ideal @Xs
nrows @m @mc
loop1:
int @c @c+1
if @c>@mc out1
row_degree @m @c @deg
poly @X1 t^(2*@deg)
concat @Xm @X1
row_degree @s @c @deg
poly @X1 t^(2*@deg)
concat @Xs @X1
jump loop1
out1:
col_degs @Xm @Xmdegs
col_degs @Xs @Xsdegs
setdegs @m
@Xmdegs
;
setdegs @s
@Xsdegs
;


;*******************************
;Now we're ready to compute the Artin-Rees number @ar

;compute the map m1: F1 -> G whose image is 
;(im m) : t^*
std @m @m
sat @m @m1 t

;and the map s1: H1 -> G whose image is
;(im (s,m1) : t^*
copy @s @s1
concat @s1 @m1
std @s1 @s1
sat @s1 @s2 t

;Now compute representatives for (im s2)/(im m1)
std @m1 @m1
reduce @m1 @s2 @s2
compress @s2 @s2

;**********************************************

;Find the degrees in y
;of the elements of @s2.
;This is made complicated because Macaulay
;keeps track of only a single degree. However:
;Such an element, @ej (the jth column)
;is bihomogeneous, in (y,t) 
;of bidegree (u1,u2) in y and t respectively.
;The degree we seek is u1-u2. 
;Choose any nonzero element of the column,
;say p, bihomogeneous of bidegree
;u1-v,u2-v
;where v is the corresponding row degree
;We have u1-u2 = (u1-v)-(u2-v), so it
;suffices to compute the bidegree of p,
;which we can do by computing the total degree
;and then the degree after setting t to 1.

copy @T @specialize
edit @specialize
ce 1 @nvars+1 1

;Now loop through the cols to compute
;u1-u2, stored as the column
;degree of the jth column of @differences

;initialize
<ideal @differences 
ncols @s2 @s2numcols
int @j 0

loop3:
int @j @j+1
if @j>@s2numcols out3
submat @s2 @e
;
@j
;Find a nonzero entry @f,
;and its degree
flatten @e @f
compress @f @f
submat @f @f
1
1
col_degree @f 1 @deg  ;u1+u2 - 2*v
;now specialize t to 1 and recompute the degree
;which is the degree in y @degy
ev @specialize @f @fy
setdegs @fy
;
;
col_degree @fy 1 @degy  ;u1-v
;We have 
;u1-u2 = 2*(u1-v) - (u1+u2-2*v) = 2*@degy-@deg
<ideal @temp t^(2*@degy-@deg)    
concat @differences @temp
jump loop3
out3:

;Now find the max
col_degs @differences @diffs
max @diffs @ar    ;the artin-rees number

;**************

;OUTPUT
;branch depending on whether there is a third arg
if #0=3 threeargs
shout type @ar
jump finish

threeargs:
int #3 @ar

finish:
setring #1
spare
END:
incr-set prlevel -1

$;;;;;;;; EXAMPLE SECTION ;;;;;;;;;;;;;;;;;;;;;;;;;
<ring 2 a-z r
<ideal J a3
qring J q

<ideal i a2 b  ;call it (f1,f2)
res i ii
copy ii.2 m

<ideal s' a 0
transpose s' s
setdegs s
m
;
;s represents the submodule a*f1 \subset (f1,f2)

<artin_rees s m 


