--programs to form a random ideal of one sort or another.--S is a ring, d a pos int, L a list of pos ints,--randomMonomial(d,S)--randomMonomialIdeal(L,S)--randomBinomialIdeal(L,S)--regSeq(L,S) -- for the ideal generated by powers of the variables.randomMonomial=(d,S)->(     i:=(ideal vars S)^d;     n:=numgens i;((gens (ideal vars S)^d)_(random n))_0)randomMonomialIdeal=(L,S)->(--L=list of degrees of the generatorsapply(# L, i->randomMonomial(L_i,S)))randomBinomialIdeal=(L,S)->(--L=list of degrees of the generatorsapply(# L, i->randomMonomial(L_i,S)-randomMonomial(L_i,S)))regSeq=(L,S)->(--forms an ideal generated by powers of the variables.--L=list of NN. uses the initial subsequence of L as degrees of variables     i:=(ideal(S_0))^(L_0);     for m from 1 to min(#L,rank source vars S)-1 do     i = i+(ideal(S_m))^(L_m);     i)endrestartload "randomIdeal.m2"kk=ZZ/101S=kk[a,b,c]L={2,4,5}L1={2,4}L2={2,4,5,6}regSeq(L,S)regSeq(L1,S)regSeq(L2,S)randomBinomialIdeal(L,S)tally apply(100, i->randomMonomial(4,S))--