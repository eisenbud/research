R = ZZ/101[a,b,c,d]
N = mutableMatrix"
a,b,c,d,0,0,0;
0,a,b,0,d,0,0;
0,0,a,b,c,d,0;
0,0,0,a,b,c,d"

M = mutableMatrix N
M_(1,0)=c
M_(1,6) = c
codim minors (4,matrix M)

R = ZZ/101[a,b,c,d,e]
N = mutableMatrix matrix"
a,b,c,d,e,0,0,0,0;
0,a,b,0,0,e,0,0,0;
0,0,a,b,0,d,e,0,0;
0,0,0,a,b,c,d,e,0;
0,0,0,0,a,b,c,d,e"

N_(1,0) = 5*d;  N_(1,8)=3*d
N_(1,8) = d

N_(1,4) = 0
N_(2,0)= c+91*d
N_(1,7) = c+13*d ; 
N_(2,8) = 3*c+21*d
N_(1,0) = c+11*d
N_(1,8) = 7*d
N_(1,6) = 17*d
N_(2,7) = 25*d
N_(0,5)= 47*d
N
codim minors (5,matrix N)

R = ZZ/101[a,b,c,d,e,f]
N = mutableMatrix matrix"
a,b,c,d,e,f,0,0,0,0,0;
e,a,b,0,0,0,f,0,c,d,e;
d,0,a,b,0,0,e,f,0,c,d;
c,0,0,a,b,0,d,e,f,0,c;
0,0,0,0,a,b,c,d,e,f,0;
0,0,0,0,0,a,b,c,d,e,f"
N
codim minors (6,matrix N)



specialMat = (R,s,w) ->(
M1 = map(R^(s-1), R^{s-1:-1}, (i,j) -> 
    if i>=j and i-j< w then R_(i-j) else 0_R);
M1||matrix{{R_1..R_(s-1)}})

s = 6;w = 2;
R = kk[x_0..x_(s-1)]
M = specialMat(R,s,w)


I = minors(s-1, M)
for j from 1 to s-1 list codim minors (s-j, M)
G1 = gens minors(s-1, M)    
G1list = flatten entries G1
--J = sum(s,j->ideal(R_(s-1-j)*G1list_j))
--J = ideal(R_0*G1list_0)+ideal G1list_{1..s-1}
--codim(J: I )

J = ideal( gens I *random(source gens I, R^{s:-s}))
codim(J:I)

for j from 1 to (s-1)//2 do(
    <<j<<" "<<s-1-j<<endl;
    << betti res prune(I^j/(J*I^(j-1)))<<endl<<endl;
    << betti res prune (I^(s-1-j)/(J*I^(s-2-j)))<<endl<<endl<<endl;
	)



viewHelp MutableMatrix
N1 = matrix{{c}}**random(R^4, R^{0,1,1,1,1,1,0})
codim minors(4,N+N1)

codim minors(4,N)




M =matrix"a,b,0,0,0;
0,0,b,0,a;
0,0,a,b,0;
0,0,0,a,b"
codim minors (4,M)


restart
macaulayMat= (R,s)->(
     map(R^(s), R^{2*s-1:-1}, (i,j) -> 
    if i<=j and i>=j-s+1 then R_(j-i) else 0_R)
)

s = 5;w = 2;
R = kk[x_0..x_(s-1)]
M = mutableMatrix macaulayMat(R,s)
M_(s-w-1,w+2) = 0
M_(s-w-1,0) = R_w 
--M_(s-w-1,2*s-2)= 3*R_(w)
M_(s-w-1,2*s-3)= R_(w)
M
codim minors(5,matrix M))
N = (matrix M)_{1..4}
for j from 1 to 4 do print codim minors(j,N)


for j from 1 to (s-1)//2 do(
    <<j<<" "<<s-1-j<<endl;
    << betti res prune(I^j/(J*I^(j-1)))<<endl<<endl;
    << betti res prune (I^(s-1-j)/(J*I^(s-2-j)))<<endl<<endl<<endl;
	)


S = kk[a,b,c,d,e]
m = matrix"a,b,c,d;
b,c,d,e"
I = trim minors (2,m)
betti res (I^2)

S = kk[a,b,c,d,e,f]
m = matrix"
    a,b,c;
    b,d,e;
    c,e,f"

S = kk[a,b,c,d,e,f,g,h]
m = matrix"
a,b,c,d;
e,f,g,h"

I = trim minors (2,m)
J = ideal ((gens I)*random(source gens I, S^{5:-3}))
betti res prune (I/J)
betti res prune (I^2/(J*I))

betti res (I^2)

H1 = (kernel koszul(1, gens I))/(image koszul(2, gens I))
betti res prune H1

H2 = (kernel koszul(2, gens I))/(image koszul(3, gens I))
betti res prune H2

H3 = (kernel koszul(3, gens I))/(image koszul(4, gens I));
betti res prune H3


m= 4
n=2
r=n-1

T = kk[z_{0,0}..z_{m-1,r}]
M = map(T^m, T^{n:-1}, transpose genericMatrix(T,T_0,n,m))
K = minors(r+1,M)
M' = M^{m-r..m-1}
I = minors(r,M')
J = ideal (reverse flatten entries gens minors(r+1,M))_{0..m-r-1}
K == (J:I)

R = kk[a,b,c]
M = mutableMatrix matrix"
b,a,0,0,0;
0,b,a,c,0;
0,0,b,a,c"
M_(2,0)=c
M_(0,4) = c
m = matrix M
codim (K= minors (3,m))
n = m_{0,3,4}
m1 = m_{1,2}
I = minors(2,m1)
m' = m_{0,3,4,1,2}
J = ideal( (flatten entries gens minors(3,m'))_{7,8,9})
trim J:I
codim(J:I)
middle = coker m
hf(-1..10, middle)
hf(0..10,R^1/K)
omega2 = prune Ext^3(R^1/K,R^{-5})
H = Hom(middle ** middle, omega2);

hf(0..10, prune (I^2/(I*J)))
basis(0,H)

f = homomorphism basis(0,H)
prune coker f
presentation middle
t = matrix"a,b,c"
t**t
reln = (syz(t**t))_{0,1,2}
prune coker map(middle**middle, R^3, reln)
f*map(source f, R^3, reln)
betti f


(gens intersect(I,(I*J:I)))%J
prune(I/J)
dua = R^{-4}**prune Hom((I/J), omega2)
homomorphism basis (0,Hom(dua,I/J))

hf(0..5, I/J)

------
--140530-Question about generation of the socle: when s=d
--should we conj that the socle mod I^{d-g}J is generated by
--any determinant of a matrix A such that 
--(x)A = f

--case g=1: notation as in prop. 6.4:
kk = ZZ/101
S= kk[a,b,c,d]

G = ideal"a5+b5+c5+d5"
F = ideal"a3,b3,c3,d3"

J= F*G
A = diff(transpose vars S, gens I)
8*(gens (F*G))==(vars S)*A

B = transpose koszul(2,vars S)
C = random(S^4, S^{6:-6})
D = C*B;
t = (J*(G^3)):ideal(det(D+A))
t = (J*(G^3)):ideal(det A)

restart
kk = ZZ/101
S= kk[a,b]

G = ideal"a5+b5"
F = ideal"a3,b3"

J= F*G
A = diff(transpose vars S, gens J)
8*(gens (F*G))==(vars S)*A

B = transpose koszul(2,vars S)
C = random(S^2, S^{1:-6})
D = C*B;
t = (J*(G)):ideal(det(D+A))
t = (J*(G)):ideal(det A)

restart

kk = ZZ/101
S= kk[a,b]

p= 2
q = 1
G = ideal(a^p+b^p) -- with this G, the det of the deformed Jacobian A+D is equal to G!
G = ideal(a*b) -- with this G the det of the deformed Jacobian A+D is  not in (G).
F = ideal(a^q,b^q)

J= F*G
A = diff(transpose vars S, gens J)

B = transpose koszul(2,vars S)
C = map(S^2, S^{1:-(p-2)},matrix{{a^(p-2)},{b^(p-2)}})
D = C*B;
t = (J*(G)):ideal(det(D+A))
det(D+A)%G
t = (J*(G)):ideal(det A)

K = res coker vars S
KJ = chainComplex (koszul(1, gens J), koszul(2, gens J))
KJ.dd_1*KJ.dd_2
m=map(KJ_0,K_0,(gens(G^2*F))_{1})
mm = extend(KJ,K,m, Verify=>true)

HH_1(mm)
mm

sigma1 = mm_0%(KJ.dd_1)
sigma1 = mm_0//(KJ.dd_1)
(mm_1-sigma1*(K.dd_1))
(mm_1-sigma1*(K.dd_1))//(KJ.dd_2)


-------------

S = kk[a,b,c,d,e]
rnc = matrix"a,b,c,d;
b,c,d,e"
I = minors(2, rnc)
J=ideal ((gens I)*random(source gens I, S^{4:-3}));
K = J:I;
betti res K
codim K
omega = prune Ext^4(S^1/K, S^{-5});
betti res omega
M = prune (I^2/(J*I))
betti res M
betti res omega
betti res I
viewHelp isSurjective

betti res (I^2)


----
--When is the Jacobian of GF the socle of I^2/IJ in the case t=1. Work in grade 1, I = G, J = GF where F is a regular seq
--of length s.
restart
S = kk[a,b]
f = 3
f1 = 4
g = 5
G = (flatten entries random(S^1, S^{-g}))_0
F2 = (flatten entries random(S^1, S^{-f1}))_0
F1 = (flatten entries random(S^1, S^{-f}))_0

G = a
F0 = a^2+b^2
F2 = a+b
F1 = (3*a+5*b)*(a+b) +F0

restart
--general choice doesn't give socle
S = kk[a,b]
G = a
F0 = a^2+b^2
F2 = a+b
F1 = (3*a+5*b)*F2 +F0
F1 = -b*(F2)+F0
codim ideal(F1,F2)

J = ideal(G*F1, G*F2)
JGF =det diff(transpose vars S, matrix{{G*F1,G*F2}})
JI = G*J
JI:ideal(JGF)

JGF%matrix{{G}}

G^2*JF%(gb i)
JGF%(gb i)


i = ideal(G^2*F1, G^2*F2)
j1=i+ideal(JGF)
j2=i+ideal(G^2*JF)
j1:j2
j2:j1
betti res i

----

S = kk[a,b,c]
mm=ideal vars S
I = ideal"a3, b5"
J1 = ideal((gens I)*random(source gens I, S^{1:-6}))
J = J1+ ideal(a^3*c^3,a^6+b^5*c)
codim(J:I)
d = det jacobian gens J
(I*J):d

-----

--g=2, t=1
restart
S= kk[a,b,c]
m = random(S^3, S^{2:-1, 2:-2})
I = minors(3,m)
codim I
codim minors(2,m)
Jmat = (gens I)*random(source gens I, S^{1:-5,2:-6});
J= ideal Jmat
d = det jacobian Jmat
(I*J):d



--g=2, t=2
restart
S= kk[a,b,c,d]
m = random(S^4, S^{3:-1, 2:-2})
I = minors(4,m)
codim I
codim minors(2,m)

Jmat = (gens I)*random(source gens I, S^{4:-7});

J= ideal Jmat

d = det jacobian Jmat
(I^2*J):d


--g=t=1 again
restart
S = kk[a,b]
G = a
I = ideal G
F1 = a^2+b^2
F2 = a+b
J = ideal(G*F1, G*F2)
s1= (3*a^2+b^2)*(a-b)
s = (2*a+b)*(3*a^2-b^2+2*a*b)
(I*J):s


--g=2, t=1
restart
R = QQ[x,y,z, Degrees =>{2,3,4}]
g = (x^2-z)
h = (x*z-y^2)
f = g*h
isHomogeneous f
J = ideal diff(vars R,f)
I = saturate J 
assert(I == ideal (g,h))
hessf = det jacobian J
hessf % gens(I^2)
assert (I == (I*J): hessf)

J' = map(R^1, source gens J, gens J)*random(source gens J, R^{3:-12})
isHomogeneous J'
I == saturate ideal J'
s = det jacobian J'
s% gens(I^2)
s% gens(I*ideal J')
I*(ideal J') : ideal s
 ----- Same computation with random g,h
restart
R = QQ[x,y,z, Degrees =>{2,3,4}]

g = random(R^1, R^{-4})
h = random(R^1, R^{-6})
f = g*h
isHomogeneous f
J = ideal diff(vars R,f)
hessf = det jacobian J
codim J
I = saturate J 
degrees gens I
hessf % gens(I^2)
(I*J):hessf
I == radical I

J' = map(R^1, source gens J, gens J)*random(source gens J, R^{3:-12})
isHomogeneous J'
I == saturate ideal J'
s = det jacobian J'
s% gens(I^2)
s% gens(I*ideal J')
I*(ideal J') : ideal s


---Evidence to suggest that if J generated by elements of the same quasihomogeneous degree, then
--the socle theorem holds as in the homogeneous case.
restart
R = QQ[x,y,z, Degrees =>{2,3,4}]

I = ideal (random(R^1, R^{-10,-12}))
J' = map(R^1, source gens I, gens I)*random(source gens I, R^{3:-24})
isHomogeneous J'
I == saturate ideal J'
s = det jacobian J'
s% gens(I^2)
s% gens(I*ideal J')
I*(ideal J') : ideal s
